class Game {
    field Array fallingObjects;
    field Player player;
    field Score score;
    field Health health;
    field int itemsAmount;

    constructor Game new(int itemsOnMap) {
        do Screen.clearScreen();
        let itemsAmount = itemsOnMap;
        let player = Player.new();
        let score = Score.new();
        let health = Health.new();
        do initializeFallingItemsArray();
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 223, 512, 223);
        return this;
    }

    method void initializeFallingItemsArray(){
        var int i;
        let fallingObjects = Array.new(itemsAmount);
        let i = 0;
        while (i < itemsAmount) {
            let fallingObjects[i] = null;
            let i = i + 1;
        }
        return;
    }

    method void run() {
        var bool overlap;
        var bool addNewItem;
        var bool exit;
        var char key;
        var int rnd;
        var bool disposeItem;
        var RigidBody rb;
        var int i;
        var FallingItem fallinItem;
        let exit = false;
        while (~exit) {
            let addNewItem = true;      
            let key = Keyboard.keyPressed();
            let exit = processInput(key);
            let i = 0;

            while (i < itemsAmount & ~(exit)) {
                let disposeItem = false;
                if (fallingObjects[i] = null) {
                    let rnd = Random.next(495);
                    let fallingObjects[i] = FallingItem.new(rnd, 0, 16, 16);
                    let addNewItem = false;
                }
                else {
                    let fallinItem = fallingObjects[i];
                    let rb = fallinItem.getRigidBody();
                    let rb = RigidBody.new(rb.getTopLeftX(), rb.getTopLeftY() + 2, 16, 16);
                    let overlap = ObjectsOverlap.areOverlapping(rb, player.getRigidBody());
                    if (overlap) {
                        let disposeItem = true;
                        do score.addPoints(5);
                    }
                    if (rb.getTopLeftY() + 16 < 224) {
                        let disposeItem = true;
                        do health.takeDamage();
                    }
                    if (rb.getTopLeftY() + 16 > 223 & ~(overlap)) {
                        do fallinItem.moveDown();
                    }
                    if (disposeItem) {
                        do fallinItem.clear();
                        do fallinItem.dispose();
                        let fallingObjects[i] = null;
                    }
                }
                let i = i + 1;
            }
            let exit = exit | health.isGameOver();
        }
        return;
    }

    // returns true if need to exit
    method bool processInput(int key) {
        if (key = 81) { // q key
            return true; 
        } 
        if (key = 130) { 
            do player.move(0); 
        } 
        if (key = 132) { 
            do player.move(1); 
        }
        return false;
    }
    
    method void dispose() {
        var int i;
        var FallingItem fallinItem;
        let i = 0;
        do player.dispose();
        do score.dispose();
        do health.dispose();
        while (i < itemsAmount) {
            let fallinItem = fallingObjects[i];
            do fallinItem.dispose();
            let i = i + 1;
        }
        do fallingObjects.dispose();
        do Memmory.deAlloc(this);
        return;
    }
} 