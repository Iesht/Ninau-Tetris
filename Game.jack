class Game {
    field Array fallingObjects;
    field Player player;
    field Score score;
    field Health health;
    field int itemsAmount;
    field Random rnd;

    constructor Game new(int itemsOnMap) {
        do Screen.clearScreen();
        let itemsAmount = itemsOnMap;
        let rnd = Random.new();
        let player = Player.new();
        let score = Score.new();
        let health = Health.new();
        do initializeFallingItemsArray();
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 223, 511, 224);
        return this;
    }

    method void initializeFallingItemsArray(){
        var int i;
        let fallingObjects = Array.new(itemsAmount);
        let i = 0;
        while (i < itemsAmount) {
            let fallingObjects[i] = null;
            let i = i + 1;
        }
        return;
    }

    method void run() {
        var bool exit;
        var char key;
        var int spawnPosition;
        var int spawnNextItemWait;
        var int i;  

    
        let exit = false;
        let spawnNextItemWait = 30;
        while (~exit) {
            let key = Keyboard.keyPressed();
            let exit = processInput(key);
            let i = 0;

            while (i < itemsAmount) {
                if (fallingObjects[i] = null) {
                    if (spawnNextItemWait = 0) {
                        let spawnPosition = rnd.nextInt(496);
                        let fallingObjects[i] = FallingItem.new(spawnPosition, 0, 16, 16);
                        do rnd.updateSeed(i);
                        let spawnNextItemWait = 30;
                    }
                }
                else { let fallingObjects[i] = processMoveFallingItem(fallingObjects[i]); }
                let i = i + 1;
            }

            let spawnNextItemWait = spawnNextItemWait - 1;
            let exit = exit | health.isGameOver();
            do Sys.wait(100);
        }

        return;
    }


    method FallingItem processMoveFallingItem(FallingItem item) {
        var RigidBody rb;
        var bool overlap;
        var bool disposeItem;

        let rb = item.getRigidBody();
        let overlap = ObjectsOverlap.areOverlapping(player.getRigidBody(), rb);

        if (overlap) {
            let disposeItem = true;
            do score.addPoints(5);
        }
        if (rb.getBottomLeftY() + 2 > 222) {
            let disposeItem = true;
            do health.takeDamage();
        }
        if (rb.getBottomLeftY() + 2 < 223 & ~(overlap)) {
            do item.moveDown();
        }
        if (disposeItem) {
            do item.dispose();
            return null;
        }
        return item;
    }


    // returns true if has to exit
    method bool processInput(int key) {
        if (key = 81) { // q key
            return true; 
        } 
        if (key = 130) { 
            do player.move(0); 
        } 
        if (key = 132) { 
            do player.move(1); 
        }
        return false;
    }
    
    method void dispose() {
        var int i;
        var FallingItem fallinItem;
        let i = 0;
        do player.dispose();
        do score.dispose();
        do health.dispose();
        while (i < itemsAmount) {
            if (~(fallingObjects[i] = null)){
                let fallinItem = fallingObjects[i];
                do fallinItem.dispose();
            }
            let i = i + 1;
        }
        do fallingObjects.dispose();
        do Memory.deAlloc(this);
        return;
    }
} 