class Game {
    field Array fallingObjects;
    field Player player;
    field Score score;
    field Health health;
    field int itemsAmount;

    constructor Game new(int itemsOnMap) {
        do Screen.clearScreen();
        let itemsAmount = itemsOnMap;
        let player = Player.new();
        let score = Score.new();
        let health = Health.new();
        do initializeFallingItemsArray();
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 223, 511, 224);
        return this;
    }

    method void initializeFallingItemsArray(){
        var int i;
        let fallingObjects = Array.new(itemsAmount);
        let i = 0;
        while (i < itemsAmount) {
            let fallingObjects[i] = null;
            let i = i + 1;
        }
        return;
    }

    method void run() {
        var bool addNewItem;
        var bool exit;
        var char key;
        let exit = false;
        let addNewItem = true; 
        while (~exit) {
            let key = Keyboard.keyPressed();
            let exit = processInput(key);
            do processFallingItems(addNewItem);
            if (addNewItem) {
                let addNewItem = false; 
            }
            let exit = exit | health.isGameOver();
            do Sys.wait(100);
        }
        return;
    }

    method void processFallingItems() {
        var bool addNewItem;
        var bool overlap;
        var int rnd;
        var RigidBody rb;
        var int i;
        var FallingItem fallinItem;
        var bool disposeItem;
        var int next;
        let addNewItem = true;
        let next = 0;
        let i = 0;
        while (i < itemsAmount) {
            let disposeItem = false;
            if (fallingObjects[i] = null) {
                if (addNewItem){
                    let fallingObjects[i] = FallingItem.new(next, 0, 16, 16);
                    let next = (next + 32) - ((next + 32) / 512 * 512);
                    let addNewItem = false;
                }
            }
            else {
                let fallinItem = fallingObjects[i];
                let rb = fallinItem.getRigidBody();
                let overlap = ObjectsOverlap.areOverlapping(player.getRigidBody(), rb);
                if (overlap) {
                    let disposeItem = true;
                    do score.addPoints(5);
                }
                if (rb.getBottomLeftY() + 2 > 222) {
                    let disposeItem = true;
                    do health.takeDamage();
                }
                if (rb.getBottomLeftY() + 2 < 223 & ~(overlap)) {
                    do fallinItem.moveDown();
                }
                if (disposeItem) {
                    do fallinItem.dispose();
                    let fallingObjects[i] = null;
                }
            }
            let i = i + 1;
        }
        return;
    }

    // returns true if need to exit
    method bool processInput(int key) {
        if (key = 81) { // q key
            return true; 
        } 
        if (key = 130) { 
            do player.move(0); 
        } 
        if (key = 132) { 
            do player.move(1); 
        }
        return false;
    }
    
    method void dispose() {
        var int i;
        var FallingItem fallinItem;
        let i = 0;
        do player.dispose();
        do score.dispose();
        do health.dispose();
        while (i < itemsAmount) {
            let fallinItem = fallingObjects[i];
            do fallinItem.dispose();
            let i = i + 1;
        }
        do fallingObjects.dispose();
        do Memmory.deAlloc(this);
        return;
    }
} 